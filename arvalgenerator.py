# Copyright 2019 Brian T. Park
#
# MIT License
"""
Generate the Arduino validation data (validation_data.h and validation_data.cpp)
files for unit tests.
"""

import logging
import os

from transformer import short_name
from transformer import div_to_zero
from extractor import EPOCH_YEAR


class ArduinoValidationGenerator:
    """Generate Arduino data files for ValidationTest.ino.
    """

    VALIDATION_DATA_H_FILE = """\
// This file was generated by the following script:
//
//  $ {invocation}
//
// using the TZ Database files from
// https://github.com/eggert/tz/releases/tag/{tz_version}
//
// DO NOT EDIT

#ifndef ACE_TIME_VALIDATION_TEST_{includeHeaderNamespace}_DATA_H
#define ACE_TIME_VALIDATION_TEST_{includeHeaderNamespace}_DATA_H

#include "ValidationDataType.h"

namespace ace_time {{
namespace {dbNamespace} {{

// numZones: {numZones}
{validationItems}

}}
}}

#endif
"""

    VALIDATION_DATA_H_ITEM = """\
extern const {validationDataClass} kValidationData{zoneShortName};
"""

    VALIDATION_DATA_CPP_FILE = """\
// This file was generated by the following script:
//
//   $ {invocation}
//
// using the TZ Database files from
// https://github.com/eggert/tz/releases/tag/{tz_version}
//
// DO NOT EDIT

#include <AceTime.h>
#include "{fileBase}_data.h"

namespace ace_time {{
namespace {dbNamespace} {{

{validationItems}

}}
}}
"""

    VALIDATION_DATA_CPP_ITEM = """\
//---------------------------------------------------------------------------
// Zone name: {zoneShortName}
//---------------------------------------------------------------------------

static const ValidationItem kValidationItems{zoneShortName}[] = {{
  //    epoch,  utc,  dst,   y,  m,  d,  h,  m,  s
{testItems}
}};

const {validationDataClass} kValidationData{zoneShortName} = {{
  &kZone{zoneShortName} /*zoneInfo*/,
  sizeof(kValidationItems{zoneShortName})/sizeof(ValidationItem) /*numItems*/,
  kValidationItems{zoneShortName} /*items*/,
}};

"""

    TEST_ITEM = """\
  {{ {epochSeconds:9}, {totalOffsetMinutes:4}, {deltaOffsetMinutes:4}, \
{yearTiny:3}, {month:2}, {day:2}, {hour:2}, {minute:2}, {second:2} }}, \
// type={type}
"""

    TESTS_CPP = """\
// This file was generated by the following script:
//
//   $ {invocation}
//
// using the TZ Database files from
// https://github.com/eggert/tz/releases/tag/{tz_version}
//
// DO NOT EDIT

#include <AUnit.h>
#include "{testClass}.h"
#include "{fileBase}_data.h"

// numZones: {numZones}
{testCases}
"""

    TEST_CASE = """\
testF({testClass}, {zoneShortName}) {{
  assertValid(&ace_time::{dbNamespace}::kValidationData{zoneShortName});
}}
"""

    def __init__(self, invocation, tz_version, test_data, num_items, extended):
        self.invocation = invocation
        self.tz_version = tz_version
        self.test_data = test_data
        self.num_items = num_items
        self.extended = extended  # extended Arduino/C++ database
        self.extended_suffix = 'x' if extended else ''
        if extended:
            self.file_base = 'validation'
            self.include_header_namespace = 'VALIDATION'
            self.db_namespace = 'zonedbx'
            self.test_class = 'TransitionTest'
            self.validation_data_class = 'ValidationData'
        else:
            self.file_base = 'validation'
            self.include_header_namespace = 'VALIDATION'
            self.db_namespace = 'zonedb'
            self.test_class = 'TransitionTest'
            self.validation_data_class = 'ValidationData'
        self.validation_data_h_file_name = (self.file_base + '_data.h')
        self.validation_data_cpp_file_name = (self.file_base + '_data.cpp')
        self.validation_tests_file_name = (self.file_base + '_tests.cpp')

    def generate_files(self, output_dir):
        self._write_file(output_dir, self.validation_data_h_file_name,
                         self._generate_validation_data_h())
        self._write_file(output_dir, self.validation_data_cpp_file_name,
                         self._generate_validation_data_cpp())
        self._write_file(output_dir, self.validation_tests_file_name,
                         self._generate_tests_cpp())

    def _write_file(self, output_dir, filename, content):
        full_filename = os.path.join(output_dir, filename)
        with open(full_filename, 'w', encoding='utf-8') as output_file:
            print(content, end='', file=output_file)
        logging.info("Created %s", full_filename)

    def _generate_validation_data_h(self):
        validation_items = self._generate_validation_data_h_items(
            self.test_data)

        return self.VALIDATION_DATA_H_FILE.format(
            invocation=self.invocation,
            tz_version=self.tz_version,
            includeHeaderNamespace=self.include_header_namespace,
            dbNamespace=self.db_namespace,
            numZones=len(self.test_data),
            validationItems=validation_items)

    def _generate_validation_data_h_items(self, test_data):
        validation_items = ''
        for short_name, test_items in sorted(test_data.items()):
            validation_items += self.VALIDATION_DATA_H_ITEM.format(
                validationDataClass=self.validation_data_class,
                zoneShortName=short_name)
        return validation_items

    def _generate_validation_data_cpp(self):
        validation_items = self._generate_validation_data_cpp_items(
            self.test_data)

        return self.VALIDATION_DATA_CPP_FILE.format(
            invocation=self.invocation,
            tz_version=self.tz_version,
            fileBase=self.file_base,
            dbNamespace=self.db_namespace,
            validationItems=validation_items)

    def _generate_validation_data_cpp_items(self, test_data):
        validation_items = ''
        for short_name, test_items in sorted(test_data.items()):
            test_items_string = self._generate_validation_data_cpp_test_items(
                short_name, test_items)
            validation_item = self.VALIDATION_DATA_CPP_ITEM.format(
                validationDataClass=self.validation_data_class,
                zoneShortName=short_name, testItems=test_items_string)
            validation_items += validation_item
        return validation_items

    def _generate_validation_data_cpp_test_items(self, short_name, test_items):
        """Generate the {testItems} value.
        """
        s = ''
        for test_item in test_items:
            total_offset_minutes = div_to_zero(test_item.total_offset, 60)
            delta_offset_minutes = div_to_zero(test_item.dst_offset, 60)
            s += self.TEST_ITEM.format(
                epochSeconds=test_item.epoch,
                totalOffsetMinutes=total_offset_minutes,
                deltaOffsetMinutes=delta_offset_minutes,
                yearTiny=test_item.y - EPOCH_YEAR,
                month=test_item.M,
                day=test_item.d,
                hour=test_item.h,
                minute=test_item.m,
                second=test_item.s,
                type=test_item.type)
        return s

    def _generate_tests_cpp(self):
        test_cases = self._generate_test_cases(self.test_data)

        return self.TESTS_CPP.format(
            invocation=self.invocation,
            tz_version=self.tz_version,
            testClass=self.test_class,
            fileBase=self.file_base,
            numZones=len(self.test_data),
            testCases=test_cases)

    def _generate_test_cases(self, test_data):
        test_cases = ''
        for short_name, _ in sorted(test_data.items()):
            test_case = self.TEST_CASE.format(
                dbNamespace=self.db_namespace,
                testClass=self.test_class,
                zoneShortName=short_name)
            test_cases += test_case
        return test_cases
