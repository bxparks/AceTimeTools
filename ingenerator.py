# Copyright 2018 Brian T. Park
#
# MIT License
"""
Generate the Python zone_info and zone_policies maps directly instead
of creating files. These maps can be used for further processing.
"""

from argenerator import normalize_name
from argenerator import normalize_raw

class InlineGenerator:
    """Generate Python zone infos and policies maps inlined (instead of files).
    """

    def __init__(self, zones_map, rules_map, removed_zones, removed_policies,
                 notable_zones, notable_policies):
        self.zones_map = zones_map
        self.rules_map = rules_map
        self.removed_zones = removed_zones
        self.removed_policies = removed_policies
        self.notable_zones = notable_zones
        self.notable_policies = notable_policies

        self.zone_infos = {}
        self.zone_policies = {}

    def generate_maps(self):
        """Return the zone_infos and zone_policies maps which look identical
        to the zone_infos.py and zone_policies.py generated by PythonGenerator.
        """
        self.generate_policies()
        self.generate_infos()
        return (zone_infos, zone_policies)

    def generate_policies(self):
        for name, rules in rules_map.items():
            policy_rules = []
            for rule in rules:
                policy_rules.append({
                    'fromYear': rule['fromYear'],
                    'toYear': rule['toYear'],
                    'inMonth': rule['inMonth'],
                    'onDayOfWeek': rule['onDayOfWeek'],
                    'onDayOfMonth': rule['onDayOfMonth'],
                    'atSeconds': rule['atSecondsTruncated'],
                    'atTimeModifier': rule['atTimeModifier'],
                    'deltaSeconds': rule['deltaSecondsTruncated'],
                    'letter': rule['letter']
                })

            policy_name = normalize_name(name)
            self.zone_policies[policy_name] = {
                'name': policy_name,
                'rules': policy_rules
            }

    def generate_infos(self):
        for name, zones in self.zones_map.items():
            zone_eras = []
            for era in eras:
                policy_name = era['rules']
                if policy_name in ['-', ':']:
                    zone_policy = policy_name
                else:
                    zone_policy = self.zone_policies[policy_name]

                rules_delta_seconds = era['rulesDeltaSecondsTruncated']
                if not rules_delta_seconds: rules_delta_seconds = 0

                zone_eras.append({
                  'offsetSeconds': era['offsetSecondsTruncated'],
                  'zonePolicy': zonePolicy,
                  'rulesDeltaSeconds': rules_delta_seconds,
                  'format': era['format'],
                  'untilYear': era['untilYear'],
                  'untilMonth': era['untilMonth'],
                  'untilDay': era['untilDay'],
                  'untilSeconds': era['untilSecondsTruncated'],
                  'untilTimeModifier': era['untilTimeModifier'],
                })

