# Copyright 2018 Brian T. Park
#
# MIT License.

"""Data types for parsing, extracting and processing the TZ Database files.
"""

from typing import Dict
from typing import List
from typing import Optional
from typing import NamedTuple
from typing_extensions import TypedDict

# -----------------------------------------------------------------------------
# Data types generated by extractor.py
# -----------------------------------------------------------------------------


class ZoneRuleRaw(TypedDict, total=False):
    """Represents the input records corresponding to the 'RULE' lines in a
    tz database file.
    """
    fromYear: int  # from year
    toYear: int  # to year, 1 to MAX_YEAR (9999) means 'max'
    inMonth: int  # month index (1-12)
    onDay: str  # 'lastSun' or 'Sun>=2', or 'dayOfMonth'
    atTime: str  # hour at which to transition to and from DST
    atTimeSuffix: str  # 's', 'w', 'u'
    deltaOffset: str  # offset from Standard time ('SAVE' field)
    letter: str  # 'D', 'S', '-'
    rawLine: str  # the original RULE line from the TZ file

    # These are derived from above and are optional.
    onDayOfWeek: int  # 1=Monday, 7=Sunday, 0={exact dayOfMonth match}
    onDayOfMonth: int  # 1-31 "dow>=xx", -(1-31) "dow<=xx", 0={lastXxx}
    atSeconds: int  # atTime in seconds since 00:00:00
    atSecondsTruncated: int  # atSeconds after truncation
    deltaSeconds: int  # offset from Standard time in seconds
    deltaSecondsTruncated: int  # deltaSeconds after truncation
    used: Optional[bool]  # whether or not the rule is used by a zone


class ZoneEraRaw(TypedDict, total=False):
    """Represents the input records corresponding to the 'ZONE' lines in a
    tz database file.
    """
    offsetString: str   # offset from UTC/GMT
    rules: str  # name of the Rule in effect, '-', or minute offset
    format: str  # abbreviation format (e.g. P%sT, E%ST, GMT/BST)
    untilYear: int  # MAX_UNTIL_YEAR means 'max'
    untilYearOnly: bool  # true if only the year is given
    untilMonth: int  # 1-12
    untilDayString: str  # e.g. 'lastSun', 'Sun>=3', or '1'-'31'
    untilTime: str  # e.g. '2:00', '00:01'
    untilTimeSuffix: str  # '', 's', 'w', 'g', 'u', 'z'
    rawLine: str  # original ZONE line in TZ file

    # These are derived from above and optional.
    offsetSeconds: int  # offset from UTC/GMT in seconds
    offsetSecondsTruncated: int  # offsetSeconds truncation granularity

    # delta offset from UTC in seconds if RULES is DST offset string of the form
    # hh:mm[:ss]
    rulesDeltaSeconds: int

    rulesDeltaSecondsTruncated: int  # rulesDeltaSeconds truncated granularity
    untilDay: int  # 1-31
    untilSeconds: int  # untilTime converted into total seconds
    untilSecondsTruncated: int  # untilSeconds after truncation


# Map of policyName -> ZoneRuleRaw[]. Created by extractor.py.
# Probably should be renmaed PoliciesMap to be consistent with ZonesMap.
PoliciesMap = Dict[str, List[ZoneRuleRaw]]

# Map of zoneName -> ZoneEraRaw[]. Created by extractor.py.
ZonesMap = Dict[str, List[ZoneEraRaw]]

# Map of linkName -> zoneName. Created by extractor.py.
LinksMap = Dict[str, str]

# -----------------------------------------------------------------------------
# Data types generated by transformer.py
# -----------------------------------------------------------------------------


# Map of zoneName -> List[Comment] created by transformer.py. Same as
# transformer.CommentsCollection but converted to a List so that it can be
# serialized as JSON.
CommentsMap = Dict[str, List[str]]


class TransformerResult(NamedTuple):
    """Result type of Transformer.get_data()."""
    zones_map: ZonesMap
    policies_map: PoliciesMap
    links_map: LinksMap
    removed_zones: CommentsMap
    removed_policies: CommentsMap
    removed_links: CommentsMap
    notable_zones: CommentsMap
    notable_policies: CommentsMap
    notable_links: CommentsMap
