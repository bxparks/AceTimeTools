# Copyright 2018 Brian T. Park
#
# MIT License
"""
Generate the zone_info and zone_policies files.
"""

import logging

class Generator:
    ZONE_POLICIES_H_FILE = """\
// This file was generated by the following script:
//   {invocation}
//
// DO NOT EDIT

#ifndef ACE_TIME_ZONE_POLICIES_H
#define ACE_TIME_ZONE_POLICIES_H

#include "../common/ZonePolicy.h"

namespace ace_time {{
namespace zonedb {{

{policyItems}

}}
}}

#endif
"""

    ZONE_POLICIES_H_POLICY_ITEM = """\
external const common::ZonePolicy kPolicy{policyName};
"""

    ZONE_POLICIES_CPP_FILE = """\
// This file was generated by the following script:
//   {invocation}
//
// DO NOT EDIT

#include "zone_policies.h"

namespace ace_time {{
namespace zonedb {{

{policyItems}

}}
}}
"""

    ZONE_POLICIES_CPP_POLICY_ITEM = """\
//---------------------------------------------------------------------------
// {policyName} Rules
//---------------------------------------------------------------------------

static const common::ZoneRule kZoneRules{policyName}[] = {{
{ruleItems}
}};

const common::ZonePolicy kPolicy{policyName} = {{
  sizeof(kZoneRules{policyName})/sizeof(common::ZoneRule) /*numRules*/,
  kZoneRules{policyName} /*rules*/,
}};
"""

    ZONE_POLICIES_CPP_RULE_ITEM = """\
  // {ruleLine}
  {{
    {fromYearFull} /*fromYearFull*/,
    {toYearFull} /*toYearFull*/,
    {inMonth} /*inMonth*/,
    {onDayOfWeek} /*onDayOfWeek*/,
    {onDayOfMonth} /*onDayOfMonth*/,
    {atHour} /*atHour*/,
    '{atHourModifier}' /*atHourModifier*/,
    {deltaCode} /*deltaCode*/,
    '{letter}' /*letter*/,
  }},
"""

    ZONE_INFOS_H_FILE = """\
// This file was generated by the following script:
//   {invocation}
//
// DO NOT EDIT

#ifndef ACE_TIME_ZONE_INFOS_H
#define ACE_TIME_ZONE_INFOS_H

#include "../common/ZoneInfo.h"

namespace ace_time {{
namespace zonedb {{

{zone_infos_h_body}

}}
}}

#endif
"""

    ZONE_INFOS_CPP_FILE = """\
// This file was generated by the following script:
//   {invocation}
//
// DO NOT EDIT

#include "../common/ZoneInfo.h"
#include "zone_policies.h"
#include "zone_infos.h"

namespace ace_time {
namespace zonedb {

{zone_infos_cpp}

}
}
"""

    def __init__(self, invocation, zones, rules):
        self.invocation = invocation
        self.zones = zones
        self.rules = rules

    def print_generated_policies(self):
        print(self.generate_policies_h())
        print(self.generate_policies_cpp())

    def print_generated_infos(self):
        print(self.generate_infos_h())
        print(self.generate_infos_cpp())

    def generate_policies_h(self):
        policy_items = ''
        for name, rules in self.rules.items():
            policy_items += self.ZONE_POLICIES_H_POLICY_ITEM.format(
                policyName=name)

        return self.ZONE_POLICIES_H_FILE.format(
            invocation=self.invocation,
            policyItems=policy_items)

    def generate_policies_cpp(self):
        policy_items = ''
        for name, rules in self.rules.items():
            policy_items += self.generate_rules(name, rules)

        return self.ZONE_POLICIES_CPP_FILE.format(
            invocation=self.invocation,
            policyItems=policy_items
        )

    def generate_rules(self, name, rules):
        rule_items = ''
        for rule in rules:
            rule_items += self.ZONE_POLICIES_CPP_RULE_ITEM.format(
                ruleLine=rule['rawLine'],
                fromYearFull=rule['fromYear'],
                toYearFull=rule['fromYear'],
                inMonth=rule['inMonth'],
                onDayOfWeek=rule['onDayOfWeek'],
                onDayOfMonth=rule['onDayOfMonth'],
                atHour=rule['atHour'],
                atHourModifier=rule['atHourModifier'],
                deltaCode=rule['deltaCode'],
                letter=rule['letter'])

        return self.ZONE_POLICIES_CPP_POLICY_ITEM.format(
            policyName=name,
            ruleItems=rule_items)
            
    def generate_infos_h(self):
        pass

    def generate_infos_cpp(self):
        pass
