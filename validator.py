#!/usr/bin/env python3
#
# Copyright 2018 Brian T. Park
#
# MIT License
"""
Validate the inlined zonedb maps (zone_infos and zone_policies) generated by
InlineGenerator. These should be identical to the ZONE_INFO_MAP and
ZONE_POLICY_MAP created by PythonGenerator in the zone_infos.py and
zone_policies.py files.
"""

import logging
from zone_agent import ZoneAgent

class Validator:

    def __init__(self, zone_infos, zone_policies, optimized):
        self.zone_infos = zone_infos
        self.zone_policies = zone_policies
        self.optimized = optimized

    def validate(self):
        """Validate the data in the zone_infos and zone_policies.
        """
        # map of {zoneName -> (numTransitions, year)}
        transition_stats = {}

        # Calculate the number of Transitions necessary for every Zone
        # in zone_infos, for the years 2000 to 2038.
        logging.info('Calculating transitions')
        for zone_name, zone_info in self.zone_infos.items():
            zone_agent = ZoneAgent(zone_info, self.optimized)
            count_record = (0, 0) # (count, year)
            for year in range(2000, 2038):
                zone_agent.init_year(year)
                count = len(zone_agent.transitions)
                if count > count_record[0]:
                    count_record = (count, year)
            transition_stats[zone_name] = count_record

        logging.info('Count(transitions)')
        for zone_name, count_record in sorted(
            transition_stats.items(), key=lambda x: x[1], reverse=True):
            logging.info('%s: %d (%04d)' % ((zone_name,) + count_record))
