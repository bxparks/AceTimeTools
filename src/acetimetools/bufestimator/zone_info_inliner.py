# Copyright 2018 Brian T. Park
#
# MIT License

"""
Generate the internal versions of zone_infos.py and zone_policies.py directly
instead of creating files. These maps can be used for further processing.
"""

import logging
from typing import List
from typing import Tuple
from typing import Optional

from acetimetools.datatypes.attyping import ZonesMap
from acetimetools.datatypes.attyping import PoliciesMap
from acetime.typing import ZoneRule
from acetime.typing import ZonePolicy
from acetime.typing import ZonePolicyMap
from acetime.typing import ZoneEra
from acetime.typing import ZoneInfoMap


class ZoneInfoInliner:
    """Generate Python zone infos and policies maps inlined (instead of files).
    """

    def __init__(self, zones_map: ZonesMap, policies_map: PoliciesMap):
        """
        Args:
            zones_map (dict): {full_name -> ZoneEra[]}
            policies_map (dict): {policy_name -> ZoneRules[]}
        """
        self.zones_map = zones_map
        self.policies_map = policies_map

        self.zone_infos: ZoneInfoMap = {}
        self.zone_policies: ZonePolicyMap = {}

    def generate_zonedb(self) -> Tuple[ZoneInfoMap, ZonePolicyMap]:
        """Return the zone_infos and zone_policies maps which look identical
        to the zone_infos.py and zone_policies.py generated by PythonGenerator.
        """
        logging.info('Generating inlined zone_policies and zone_infos')
        self._generate_policies()
        self._generate_infos()
        return (self.zone_infos, self.zone_policies)

    def _generate_policies(self) -> None:
        for name, policy in self.policies_map.items():
            rules = policy['rules']
            policy_rules: List[ZoneRule] = []
            for rule in rules:
                # yapf: disable
                policy_rules.append({
                    'from_year': rule['from_year'],
                    'to_year': rule['to_year'],
                    'in_month': rule['in_month'],
                    'on_day_of_week': rule['on_day_of_week'],
                    'on_day_of_month': rule['on_day_of_month'],
                    'at_seconds': rule['at_seconds_truncated'],
                    'at_time_suffix': rule['at_time_suffix'],
                    'delta_seconds': rule['delta_seconds_truncated'],
                    'letter': rule['letter']
                })
                # yapf: enable

            self.zone_policies[name] = {
                'name': name,  # policy name
                'rules': policy_rules
            }

    def _generate_infos(self) -> None:
        for zone_name, info in self.zones_map.items():
            eras = info['eras']
            zone_eras: List[ZoneEra] = []
            for era in eras:
                policy_name = era['policy_name']
                zone_policy: Optional[ZonePolicy]
                if policy_name is None:
                    zone_policy = None
                else:
                    zone_policy = self.zone_policies[policy_name]

                # yapf: disable
                zone_eras.append({
                    'offset_seconds': era['offset_seconds_truncated'],
                    'zone_policy': zone_policy,
                    'era_delta_seconds': era['era_delta_seconds_truncated'],
                    'format': era['format'],
                    'until_year': era['until_year'],
                    'until_month': era['until_month'],
                    'until_day': era['until_day'],
                    'until_seconds': era['until_seconds_truncated'],
                    'until_time_suffix': era['until_time_suffix'],
                })
                # yapf: enable
            self.zone_infos[zone_name] = {'name': zone_name, 'eras': zone_eras}
