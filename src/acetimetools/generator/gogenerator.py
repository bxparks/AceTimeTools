# Copyright 2023 Brian T. Park
#
# MIT License
"""
Generate the 'zone_infos.py' and 'zone_policies.py' files for Go lang.
"""

import logging
import os
from typing import List
from typing import Tuple

from acetimetools.data_types.at_types import ZoneEraRaw
from acetimetools.data_types.at_types import ZoneRuleRaw
from acetimetools.data_types.at_types import ZonesMap
from acetimetools.data_types.at_types import LinksMap
from acetimetools.data_types.at_types import PoliciesMap
from acetimetools.data_types.at_types import CommentsMap
from acetimetools.data_types.at_types import MergedCommentsMap
from acetimetools.data_types.at_types import ZoneInfoDatabase
from acetimetools.transformer.transformer import normalize_name
from acetimetools.transformer.transformer import normalize_raw


class GoGenerator:
    """Generate Go lang files (zone_infos.go, zone_policies.go) which are
    used by the ZoneProcessor class.
    """

    ZONE_POLICIES_FILE = """\
// This file was generated by the following script:
//
//   $ {invocation}
//
// using the TZ Database files
//
//   {tz_files}
//
// from https://github.com/eggert/tz/releases/tag/{tz_version}
//
// DO NOT EDIT

package {dbNamespace}

import (
\t"github.com/bxparks/AceTimeGo/zoneinfo"
)

// ---------------------------------------------------------------------------
// Supported zone policies: {numPolicies}
// numRules: {numRules}
// ---------------------------------------------------------------------------

{policyItems}

// ---------------------------------------------------------------------------
// Unsupported zone policies: {numRemovedPolicies}
// ---------------------------------------------------------------------------

{removedPolicyItems}

// ---------------------------------------------------------------------------
// Notable zone policies: {numNotablePolicies}
// ---------------------------------------------------------------------------

{notablePolicyItems}

"""

    ZONE_POLICY_ITEM = """\
// ---------------------------------------------------------------------------
// Policy name: {policyName}
// Rule count: {numRules}
// ---------------------------------------------------------------------------
var ZoneRules{policyName} = []zoneinfo.ZoneRule{{
{ruleItems}
}}

var ZonePolicy{policyName} = zoneinfo.ZonePolicy{{
\tRules: ZoneRules{policyName},
}}

"""

    ZONE_RULE_ITEM = """\
\t// {raw_line}
\t{{
\t\tFromYear: {from_year},
\t\tToYear: {to_year},
\t\tInMonth: {in_month},
\t\tOnDayOfWeek: {on_day_of_week},
\t\tOnDayOfMonth: {on_day_of_month},
\t\tAtTimeCode: {at_time_code},
\t\tAtTimeModifier: {at_time_modifier}, // {at_time_modifier_comment}
\t\tDeltaCode: {delta_code}, // {delta_code_comment}
\t\tLetter: "{letter}",
\t}},
"""

    ZONE_INFOS_FILE = """\
// This file was generated by the following script:
//
//   $ {invocation}
//
// using the TZ Database files
//
//   {tz_files}
//
// from https://github.com/eggert/tz/releases/tag/{tz_version}
//
// DO NOT EDIT

package {dbNamespace}

import (
\t"github.com/bxparks/AceTimeGo/zoneinfo"
)

// ---------------------------------------------------------------------------
// Zone Context
// ---------------------------------------------------------------------------

const TzDatabaseVersion string = "{tz_version}"

// ---------------------------------------------------------------------------
// Supported zones: {numInfos}
// numEras: {numEras}
// ---------------------------------------------------------------------------

{infoItems}

// ---------------------------------------------------------------------------
// Supported links: {numLinks}
// ---------------------------------------------------------------------------

{linkItems}

// ---------------------------------------------------------------------------
// Unsuported zones: {numRemovedInfos}
// ---------------------------------------------------------------------------

{removedInfoItems}

// ---------------------------------------------------------------------------
// Notable zones: {numNotableInfos}
// ---------------------------------------------------------------------------

{notableInfoItems}

// ---------------------------------------------------------------------------
// Unsuported links: {numRemovedLinks}
// ---------------------------------------------------------------------------

{removedLinkItems}

// ---------------------------------------------------------------------------
// Notable links: {numNotableLinks}
// ---------------------------------------------------------------------------

{notableLinkItems}
"""

    ZONE_INFO_ITEM = """\
// ---------------------------------------------------------------------------
// Zone name: {zoneFullName}
// Era count: {numEras}
// ---------------------------------------------------------------------------

var ZoneEra{zoneNormalizedName} = []zoneinfo.ZoneEra{{
{eraItems}
}}

const ZoneName{zoneNormalizedName} = "{zoneFullName}"

var Zone{zoneNormalizedName} = zoneinfo.ZoneInfo{{
\tName: ZoneName{zoneNormalizedName},
\tZoneID: 0x{zoneId:08x},
\tStartYear: {startYear},
\tUntilYear: {untilYear},
\tEras: ZoneEra{zoneNormalizedName},
\tTarget: nil,
}}

"""

    ZONE_ERA_ITEM = """\
\t// {raw_line}
\t{{
\t\tZonePolicy: {zone_policy},
\t\tFormat: "{format}",
\t\tOffsetCode: {offset_code},
\t\tDeltaCode: {delta_code}, // {delta_code_comment}
\t\tUntilYear: {until_year},
\t\tUntilMonth: {until_month},
\t\tUntilDay: {until_day},
\t\tUntilTimeCode: {until_time_code},
\t\tUntilTimeModifier: {until_time_modifier}, // {until_time_modifier_comment}
\t}},
"""

    ZONE_REGISTRY_FILE = """\
// This file was generated by the following script:
//
//   $ {invocation}
//
// using the TZ Database files
//
//   {tz_files}
//
// from https://github.com/eggert/tz/releases/tag/{tz_version}
//
// DO NOT EDIT

package {dbNamespace}

import (
\t"github.com/bxparks/AceTimeGo/zoneinfo"
)

// Supported Zones: {numZones}
var ZoneRegistry = map[uint32]*zoneinfo.ZoneInfo{{
{zoneItems}
}}

// Supported Zones and Links: {numZonesAndLinks}
var ZoneAndLinkRegistry = map[uint32]*zoneinfo.ZoneInfo{{
{zoneAndLinkItems}
}}
"""

    ZONE_INFOS_FILE_NAME = 'zone_infos.go'
    ZONE_POLICIES_FILE_NAME = 'zone_policies.go'
    ZONE_REGISTRY_FILE_NAME = 'zone_registry.go'

    def __init__(
        self,
        invocation: str,
        db_namespace: str,
        zidb: ZoneInfoDatabase,
    ):
        wrapped_invocation = '\n//     --'.join(invocation.split(' --'))
        wrapped_tzfiles = '\n//   '.join(zidb['tz_files'])
        self.invocation = wrapped_invocation
        self.tz_files = wrapped_tzfiles
        self.db_namespace = db_namespace
        self.tz_version = zidb['tz_version']
        self.start_year = zidb['start_year']
        self.until_year = zidb['until_year']
        self.zones_map = zidb['zones_map']
        self.links_map = zidb['links_map']
        self.policies_map = zidb['policies_map']
        self.removed_zones = zidb['removed_zones']
        self.removed_links = zidb['removed_links']
        self.removed_policies = zidb['removed_policies']
        self.notable_zones = zidb['notable_zones']
        self.merged_notable_zones = zidb['merged_notable_zones']
        self.notable_links = zidb['notable_links']
        self.notable_policies = zidb['notable_policies']
        self.zone_ids = zidb['zone_ids']
        self.link_ids = zidb['link_ids']
        self.formats_map = zidb['formats_map']

        self.zones_and_links = list(
            self.zones_map.keys()) + list(self.links_map.keys()
        )
        self.zone_and_link_ids = self.zone_ids.copy()
        self.zone_and_link_ids.update(self.link_ids)

    def generate_files(self, output_dir: str) -> None:
        self._write_file(output_dir, self.ZONE_POLICIES_FILE_NAME,
                         self._generate_policies())

        self._write_file(output_dir, self.ZONE_INFOS_FILE_NAME,
                         self._generate_infos())

        self._write_file(output_dir, self.ZONE_REGISTRY_FILE_NAME,
                         self._generate_registry())

    def _write_file(self, output_dir: str, filename: str, content: str) -> None:
        full_filename = os.path.join(output_dir, filename)
        with open(full_filename, 'w', encoding='utf-8') as output_file:
            print(content, end='', file=output_file)
        logging.info("Created %s", full_filename)

    # ------------------------------------------------------------------------
    # Zone Policies
    # ------------------------------------------------------------------------

    def _generate_policies(self) -> str:
        num_rules, policy_items = self._generate_policy_items(self.policies_map)
        removed_policy_items = _render_comments_map(self.removed_policies)
        notable_policy_items = _render_comments_map(self.notable_policies)

        return self.ZONE_POLICIES_FILE.format(
            invocation=self.invocation,
            tz_version=self.tz_version,
            tz_files=self.tz_files,
            dbNamespace=self.db_namespace,
            numPolicies=len(self.policies_map),
            numRules=num_rules,
            policyItems=policy_items,
            numRemovedPolicies=len(self.removed_policies),
            removedPolicyItems=removed_policy_items,
            numNotablePolicies=len(self.notable_policies),
            notablePolicyItems=notable_policy_items)

    def _generate_policy_items(
        self,
        policies_map: PoliciesMap,
    ) -> Tuple[int, str]:
        num_rules = 0
        policy_items = ''
        for name, rules in sorted(policies_map.items()):
            policy_items += self._generate_policy_item(name, rules)
            num_rules += len(rules)
        return (num_rules, policy_items)

    def _generate_policy_item(self, name: str, rules: List[ZoneRuleRaw]) -> str:
        rule_items = ''
        for rule in rules:
            at_time_modifier_comment = _get_time_modifier_comment(
                time_seconds=rule['at_seconds_truncated'],
                suffix=rule['at_time_suffix'],
            )
            delta_code_comment = _get_rule_delta_code_comment(
                delta_seconds=rule['delta_seconds_truncated'],
                scope='extended',  # AceTimeGo supports only extended
            )
            letter = rule['letter']
            if letter == '-':
                letter = ''
            rule_items += self.ZONE_RULE_ITEM.format(
                policyName=normalize_name(name),
                raw_line=normalize_raw(rule['raw_line']),
                from_year=rule['from_year'],
                to_year=rule['to_year'],
                in_month=rule['in_month'],
                on_day_of_week=rule['on_day_of_week'],
                on_day_of_month=rule['on_day_of_month'],
                at_time_code=rule['at_time_code'],
                at_time_modifier=rule['at_time_modifier'],
                at_time_modifier_comment=at_time_modifier_comment,
                delta_code=rule['delta_code_encoded'],
                delta_code_comment=delta_code_comment,
                letter=letter,
            )
        return self.ZONE_POLICY_ITEM.format(
            policyName=normalize_name(name),
            numRules=len(rules),
            ruleItems=rule_items)

    # ------------------------------------------------------------------------
    # Zone Infos
    # ------------------------------------------------------------------------

    def _generate_infos(self) -> str:
        (num_eras, info_items) = self._generate_info_items(self.zones_map)
        link_items = self._generate_link_items(self.links_map)
        removed_info_items = _render_comments_map(self.removed_zones)
        # notable_info_items = _render_comments_map(self.notable_zones)
        notable_info_items = _render_merged_comments_map(
            self.merged_notable_zones)
        removed_link_items = _render_comments_map(self.removed_links)
        notable_link_items = _render_comments_map(self.notable_links)

        return self.ZONE_INFOS_FILE.format(
            invocation=self.invocation,
            tz_version=self.tz_version,
            tz_files=self.tz_files,
            dbNamespace=self.db_namespace,
            start_year=self.start_year,
            until_year=self.until_year,
            numInfos=len(self.zones_map),
            numEras=num_eras,
            infoItems=info_items,
            numLinks=len(self.links_map),
            linkItems=link_items,
            numRemovedInfos=len(self.removed_zones),
            removedInfoItems=removed_info_items,
            numNotableInfos=len(self.notable_zones),
            notableInfoItems=notable_info_items,
            numRemovedLinks=len(self.removed_links),
            removedLinkItems=removed_link_items,
            numNotableLinks=len(self.notable_links),
            notableLinkItems=notable_link_items,
        )

    def _generate_info_items(self, zones_map: ZonesMap) -> Tuple[int, str]:
        info_items = ''
        num_eras = 0
        for name, eras in sorted(self.zones_map.items()):
            info_items += self._generate_info_item(name, eras)
            num_eras += len(eras)
        return (num_eras, info_items)

    def _generate_link_items(self, links_map: LinksMap) -> str:
        link_items = ''
        for link_name, zone_name in sorted(links_map.items()):
            link_normalized_name = normalize_name(link_name)
            zone_normalized_name = normalize_name(zone_name)
            start_year = self.start_year
            until_year = self.until_year
            link_id = self.link_ids[link_name]

            link_items += f"""\
// Link: {link_name} -> {zone_name}
var Zone{link_normalized_name} = zoneinfo.ZoneInfo{{
\tName: "{link_name}",
\tZoneID: 0x{link_id:08x},
\tStartYear: {start_year},
\tUntilYear: {until_year},
\tEras: nil,
\tTarget: &Zone{zone_normalized_name},
}}

"""
        return link_items

    def _generate_info_item(
        self, zone_name: str, eras: List[ZoneEraRaw],
    ) -> str:
        era_items = ''
        for era in eras:
            era_items += self._generate_era_item(era)

        return self.ZONE_INFO_ITEM.format(
            zoneFullName=zone_name,
            zoneNormalizedName=normalize_name(zone_name),
            zoneId=self.zone_ids[zone_name],
            startYear=self.start_year,
            untilYear=self.until_year,
            numEras=len(eras),
            eraItems=era_items,
        )

    def _generate_era_item(self, era: ZoneEraRaw) -> str:
        policy_name = era['rules']
        if policy_name in ['-', ':']:
            zone_policy = "nil"
        else:
            zone_policy = f'&ZonePolicy{normalize_name(policy_name)}'
        delta_code_comment = _get_era_delta_code_comment(
            offset_seconds=era['offset_seconds_truncated'],
            delta_seconds=era['rules_delta_seconds_truncated'],
            scope='extended',
        )
        until_time_modifier_comment = _get_time_modifier_comment(
            time_seconds=era['until_seconds_truncated'],
            suffix=era['until_time_suffix'],
        )

        return self.ZONE_ERA_ITEM.format(
            raw_line=normalize_raw(era['raw_line']),
            zone_policy=zone_policy,
            format=era['format_short'],
            offset_code=era['offset_code'],
            delta_code=era['delta_code_encoded'],
            delta_code_comment=delta_code_comment,
            until_year=era['until_year'],
            until_month=era['until_month'],
            until_day=era['until_day'],
            until_time_code=era['until_time_code'],
            until_time_modifier=era['until_time_modifier'],
            until_time_modifier_comment=until_time_modifier_comment,
        )

    # ------------------------------------------------------------------------
    # Zone Registry
    # ------------------------------------------------------------------------

    def _generate_registry(self) -> str:
        zone_items = self._generate_zone_registry_items(self.zones_map)
        zone_and_link_items = self._generate_zone_and_link_registry_items(
            self.zones_map,
            self.links_map,
        )

        return self.ZONE_REGISTRY_FILE.format(
            invocation=self.invocation,
            tz_version=self.tz_version,
            tz_files=self.tz_files,
            dbNamespace=self.db_namespace,
            numZones=len(self.zones_map),
            zoneItems=zone_items,
            numZonesAndLinks=len(self.zones_map) + len(self.links_map),
            zoneAndLinkItems=zone_and_link_items,
        )

    def _generate_zone_registry_items(self, zones_map: ZonesMap) -> str:
        """Generate a map of (zone_name -> zoneInfo), sorted by name.
        """
        zone_registry_items = ''
        for zone_name in sorted(
                self.zones_map.keys(),
                key=lambda x: self.zone_ids[x],
        ):
            normalized_name = normalize_name(zone_name)
            zone_id = self.zone_ids[zone_name]
            zone_registry_items += f"""\
\t0x{zone_id:08x}: &Zone{normalized_name}, // {zone_name}
"""
        return zone_registry_items

    def _generate_zone_and_link_registry_items(
        self,
        zones_map: ZonesMap,
        links_map: LinksMap,
    ) -> str:
        """Generate a map of (zone_name -> zoneInfo), for all zones and links,
        sorted by name.
        """
        zone_and_link_registry_items = ''
        num_zones_and_links = len(self.zones_and_links)
        for zone_name in sorted(
            self.zones_and_links,
            key=lambda x: self.zone_and_link_ids[x],
        ):
            normalized_name = normalize_name(zone_name)
            zone_id = self.zone_and_link_ids[zone_name]
            target_name = self.links_map.get(zone_name)
            if target_name:
                desc_name = f'{zone_name} -> {target_name}'
            else:
                desc_name = zone_name

            zone_and_link_registry_items += f"""\
\t0x{zone_id:08x}: &Zone{normalized_name}, // {desc_name}
"""
        return zone_and_link_registry_items


def _render_comments_map(comments: CommentsMap, indent: str = '') -> str:
    """Convert the CommentsMap into a Python comment. Print the name and list
    of reasons one a single line, or multiple lines, like this:

    // Name1 {reason}
    //
    // Name2 {
    //   reason1,
    //   reason2,
    // }
    """
    comment = ''
    for name, reasons in sorted(comments.items()):
        if len(reasons) <= 1:
            comment += f"// {indent}{name} {{{next(iter(reasons))}}}\n"
        else:
            comment += f"// {indent}{name} {{\n"
            for reason in reasons:
                comment += f'// {indent}  {reason},\n'
            comment += f"// {indent}}}\n"
    return comment


def _render_merged_comments_map(merged_comments: MergedCommentsMap) -> str:
    """Converts MergedCommentsMap for zones into a C++ comment. Includes the
    comments for zones, as well as any comments in the referenced policies.

    // Name1 {reason}
    //
    // Name2 {
    //   reason1,
    //   reason2,
    // }
    //
    // Name3 {
    //   reason1,
    //   reason2,
    //   Policy1 {reason11}
    //   Policy2 {
    //     reason21,
    //     reason22,
    //   }
    // }
    """
    comment = ''
    for name, reasons in sorted(merged_comments.items()):
        if len(reasons) == 0:
            continue

        # If only a single comment, and the comment is a simple string,
        # render it in a single line.
        reason = next(iter(reasons))
        if len(reasons) == 1 and isinstance(reason, str):
            comment += f"// {name} {{{reason}}}\n"
            continue

        # Otherwise, render the comments using multiple lines deliminted by ( )
        comment += f"// {name} {{\n"
        for reason in reasons:
            if isinstance(reason, str):
                comment += f'//   {reason},\n'
            else:
                comment += _render_comments_map(reason, '  ')
        comment += "// }\n"
    return comment


def _get_time_modifier_comment(
    time_seconds: int,
    suffix: str,
) -> str:
    """Create the comment that explains how the until_time_code or at_time_code
    was calculated.
    """
    if suffix == 'w':
        comment = 'SuffixW'
    elif suffix == 's':
        comment = 'SuffixS'
    else:
        comment = 'SuffixU'
    remaining_time_minutes = time_seconds % 900 // 60
    comment += f' + minute={remaining_time_minutes}'
    return comment


def _get_era_delta_code_comment(
    offset_seconds: int,
    delta_seconds: int,
    scope: str,
) -> str:
    """Create the comment that explains how the ZoneEra delta_code[_encoded] was
    calculated.
    """
    offset_minute = offset_seconds % 900 // 60
    delta_minutes = delta_seconds // 60
    if scope == 'extended':
        return (
            f"((offset_minute={offset_minute}) << 4) + "
            f"((delta_minutes={delta_minutes})/15 + 4)"
        )
    else:
        return f"(delta_minutes={delta_minutes})/15"


def _get_rule_delta_code_comment(
    delta_seconds: int,
    scope: str,
) -> str:
    """Create the comment that explains how the ZoneRule delta_code[_encoded]
    was calculated.
    """
    delta_minutes = delta_seconds // 60
    if scope == 'extended':
        return f"(delta_minutes={delta_minutes})/15 + 4"
    else:
        return f"(delta_minutes={delta_minutes})/15"
