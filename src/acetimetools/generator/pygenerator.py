# Copyright 2018 Brian T. Park
#
# MIT License
"""
Generate the 'zone_infos.py' and 'zone_policies.py' files for Python.
"""

import logging
import os
from typing import List
from typing import Tuple

from acetimetools.data_types.at_types import ZoneEraRaw
from acetimetools.data_types.at_types import ZoneRuleRaw
from acetimetools.data_types.at_types import ZonesMap
from acetimetools.data_types.at_types import LinksMap
from acetimetools.data_types.at_types import PoliciesMap
from acetimetools.data_types.at_types import CommentsMap
from acetimetools.data_types.at_types import ZoneInfoDatabase
from acetimetools.transformer.transformer import normalize_name
from acetimetools.transformer.transformer import normalize_raw


class PythonGenerator:
    """Generate Python files for zone_infos.py and zone_policies.py which are
    used by the ZoneProcessor class. Unlike the Arduino version, the Python
    implementation does not support the 'Link' zone names.
    """

    ZONE_POLICIES_FILE = """\
# This file was generated by the following script:
#
#   $ {invocation}
#
# using the TZ Database files
#
#   {tz_files}
#
# from https://github.com/eggert/tz/releases/tag/{tz_version}
#
# DO NOT EDIT

#---------------------------------------------------------------------------
# Supported zone policies: {numPolicies}
# numRules: {numRules}
#---------------------------------------------------------------------------

{policyItems}

#---------------------------------------------------------------------------
# Unsupported zone policies: {numRemovedPolicies}
#---------------------------------------------------------------------------

{removedPolicyItems}

#---------------------------------------------------------------------------
# Notable zone policies: {numNotablePolicies}
#---------------------------------------------------------------------------

{notablePolicyItems}

"""

    ZONE_POLICY_ITEM = """\
#---------------------------------------------------------------------------
# Policy name: {policyName}
# Rule count: {numRules}
#---------------------------------------------------------------------------
ZONE_RULES_{policyName} = [
{ruleItems}
]
ZONE_POLICY_{policyName} = {{
    'name': '{policyName}',
    'rules': ZONE_RULES_{policyName}
}}

"""

    ZONE_RULE_ITEM = """\
    # {raw_line}
    {{
        'from_year': {from_year},
        'to_year': {to_year},
        'in_month': {in_month},
        'on_day_of_week': {on_day_of_week},
        'on_day_of_month': {on_day_of_month},
        'at_seconds': {at_seconds},
        'at_time_suffix': '{at_time_suffix}',
        'delta_seconds': {delta_seconds},
        'letter': '{letter}',
    }},
"""

    ZONE_INFOS_FILE = """\
# This file was generated by the following script:
#
#   $ {invocation}
#
# using the TZ Database files
#
#   {tz_files}
#
# from https://github.com/eggert/tz/releases/tag/{tz_version}
#
# DO NOT EDIT

from .zone_policies import *

#---------------------------------------------------------------------------
# Supported zones: {numInfos}
# numEras: {numEras}
#---------------------------------------------------------------------------

{infoItems}

#---------------------------------------------------------------------------
# Supported links: {numLinks}
#---------------------------------------------------------------------------

{linkItems}

#---------------------------------------------------------------------------
# Unsuported zones: {numRemovedInfos}
#---------------------------------------------------------------------------

{removedInfoItems}

#---------------------------------------------------------------------------
# Notable zones: {numNotableInfos}
#---------------------------------------------------------------------------

{notableInfoItems}

#---------------------------------------------------------------------------
# Unsuported links: {numRemovedLinks}
#---------------------------------------------------------------------------

{removedLinkItems}

#---------------------------------------------------------------------------
# Notable links: {numNotableLinks}
#---------------------------------------------------------------------------

{notableLinkItems}
"""

    ZONE_INFO_ITEM = """\
#---------------------------------------------------------------------------
# Zone name: {zoneFullName}
# Era count: {numEras}
#---------------------------------------------------------------------------

ZONE_ERAS_{zoneNormalizedName} = [
{eraItems}
]

ZONE_INFO_{zoneNormalizedName} = {{
    'name': '{zoneFullName}',
    'eras': ZONE_ERAS_{zoneNormalizedName}
}}

"""

    ZONE_ERA_ITEM = """\
    # {raw_line}
    {{
      'offset_seconds': {offset_seconds},
      'zone_policy': {zone_policy},
      'rules_delta_seconds': {rules_delta_seconds},
      'format': '{format}',
      'until_year': {until_year},
      'until_month': {until_month},
      'until_day': {until_day},
      'until_seconds': {until_seconds},
      'until_time_suffix': '{until_time_suffix}',
    }},
"""

    ZONE_REGISTRY_FILE = """\
# This file was generated by the following script:
#
#   $ {invocation}
#
# using the TZ Database files
#
#   {tz_files}
#
# from https://github.com/eggert/tz/releases/tag/{tz_version}
#
# DO NOT EDIT

from .zone_infos import *

# Supported Zones: {numInfos}
ZONE_REGISTRY = {{
{infoMapItems}
}}
"""

    ZONE_INFOS_FILE_NAME = 'zone_infos.py'
    ZONE_POLICIES_FILE_NAME = 'zone_policies.py'
    ZONE_REGISTRY_FILE_NAME = 'zone_registry.py'

    def __init__(
        self,
        invocation: str,
        zidb: ZoneInfoDatabase,
    ):
        wrapped_invocation = '\n#     --'.join(invocation.split(' --'))
        wrapped_tzfiles = '\n#   '.join(zidb['tz_files'])
        self.invocation = wrapped_invocation
        self.tz_files = wrapped_tzfiles
        self.tz_version = zidb['tz_version']
        self.zones_map = zidb['zones_map']
        self.links_map = zidb['links_map']
        self.policies_map = zidb['policies_map']
        self.removed_zones = zidb['removed_zones']
        self.removed_links = zidb['removed_links']
        self.removed_policies = zidb['removed_policies']
        self.notable_zones = zidb['notable_zones']
        self.notable_links = zidb['notable_links']
        self.notable_policies = zidb['notable_policies']

    def generate_files(self, output_dir: str) -> None:
        self._write_file(output_dir, self.ZONE_POLICIES_FILE_NAME,
                         self._generate_policies())

        self._write_file(output_dir, self.ZONE_INFOS_FILE_NAME,
                         self._generate_infos())

        self._write_file(output_dir, self.ZONE_REGISTRY_FILE_NAME,
                         self._generate_registry())

    def _write_file(self, output_dir: str, filename: str, content: str) -> None:
        full_filename = os.path.join(output_dir, filename)
        with open(full_filename, 'w', encoding='utf-8') as output_file:
            print(content, end='', file=output_file)
        logging.info("Created %s", full_filename)

    # ------------------------------------------------------------------------
    # Zone Policies
    # ------------------------------------------------------------------------

    def _generate_policies(self) -> str:
        num_rules, policy_items = self._generate_policy_items(self.policies_map)
        removed_policy_items = self._generate_removed_policy_items(
            self.removed_policies)
        notable_policy_items = self._generate_notable_policy_items(
            self.notable_policies)

        return self.ZONE_POLICIES_FILE.format(
            invocation=self.invocation,
            tz_version=self.tz_version,
            tz_files=self.tz_files,
            numPolicies=len(self.policies_map),
            numRules=num_rules,
            policyItems=policy_items,
            numRemovedPolicies=len(self.removed_policies),
            removedPolicyItems=removed_policy_items,
            numNotablePolicies=len(self.notable_policies),
            notablePolicyItems=notable_policy_items)

    def _generate_policy_items(
        self,
        policies_map: PoliciesMap,
    ) -> Tuple[int, str]:
        num_rules = 0
        policy_items = ''
        for name, rules in sorted(policies_map.items()):
            policy_items += self._generate_policy_item(name, rules)
            num_rules += len(rules)
        return (num_rules, policy_items)

    def _generate_policy_item(self, name: str, rules: List[ZoneRuleRaw]) -> str:
        rule_items = ''
        for rule in rules:
            rule_items += self.ZONE_RULE_ITEM.format(
                policyName=normalize_name(name),
                raw_line=normalize_raw(rule['raw_line']),
                from_year=rule['from_year'],
                to_year=rule['to_year'],
                in_month=rule['in_month'],
                on_day_of_week=rule['on_day_of_week'],
                on_day_of_month=rule['on_day_of_month'],
                at_seconds=rule['at_seconds_truncated'],
                at_time_suffix=rule['at_time_suffix'],
                delta_seconds=rule['delta_seconds_truncated'],
                letter=rule['letter'])
        return self.ZONE_POLICY_ITEM.format(
            policyName=normalize_name(name),
            numRules=len(rules),
            ruleItems=rule_items)

    def _generate_removed_policy_items(
        self, removed_policies: CommentsMap,
    ) -> str:
        removed_policy_items = ''
        for name, reason in sorted(removed_policies.items()):
            removed_policy_items += f"""\
# {normalize_name(name)} ({reason})
"""
        return removed_policy_items

    def _generate_notable_policy_items(
        self, notable_policies: CommentsMap,
    ) -> str:
        notable_policy_items = ''
        for name, reason in sorted(notable_policies.items()):
            notable_policy_items += f"""\
# {normalize_name(name)} ({reason})
"""
        return notable_policy_items

    # ------------------------------------------------------------------------
    # Zone Infos
    # ------------------------------------------------------------------------

    def _generate_infos(self) -> str:
        (num_eras, info_items) = self._generate_info_items(self.zones_map)
        link_items = self._generate_link_items(self.links_map)
        removed_info_items = self._generate_removed_info_items(
            self.removed_zones)
        notable_info_items = self._generate_notable_info_items(
            self.notable_zones)
        removed_link_items = self._generate_removed_link_items(
            self.removed_links)
        notable_link_items = self._generate_notable_link_items(
            self.notable_links)

        return self.ZONE_INFOS_FILE.format(
            invocation=self.invocation,
            tz_version=self.tz_version,
            tz_files=self.tz_files,
            numInfos=len(self.zones_map),
            numEras=num_eras,
            infoItems=info_items,
            numLinks=len(self.links_map),
            linkItems=link_items,
            numRemovedInfos=len(self.removed_zones),
            removedInfoItems=removed_info_items,
            numNotableInfos=len(self.notable_zones),
            notableInfoItems=notable_info_items,
            numRemovedLinks=len(self.removed_links),
            removedLinkItems=removed_link_items,
            numNotableLinks=len(self.notable_links),
            notableLinkItems=notable_link_items,
        )

    def _generate_info_items(self, zones_map: ZonesMap) -> Tuple[int, str]:
        info_items = ''
        num_eras = 0
        for name, eras in sorted(self.zones_map.items()):
            info_items += self._generate_info_item(name, eras)
            num_eras += len(eras)
        return (num_eras, info_items)

    def _generate_link_items(self, links_map: LinksMap) -> str:
        link_items = ''
        for link_name, zone_name in sorted(links_map.items()):
            link_normalized_name = normalize_name(link_name)
            zone_normalized_name = normalize_name(zone_name)
            link_items += f"""\
# Link name: {link_name} -> {zone_name}
ZONE_INFO_{link_normalized_name} = {{
    'name': '{link_name}',
    'eras': ZONE_ERAS_{zone_normalized_name}
}}

"""
        return link_items

    def _generate_removed_info_items(self, removed_zones: CommentsMap) -> str:
        removed_info_items = ''
        for zone_name, reason in sorted(removed_zones.items()):
            removed_info_items += f"""\
# {zone_name} ({reason})
"""
        return removed_info_items

    def _generate_notable_info_items(self, notable_zones: CommentsMap) -> str:
        notable_info_items = ''
        for zone_name, reason in sorted(notable_zones.items()):
            notable_info_items += f"""\
# {zone_name} ({reason})
"""
        return notable_info_items

    def _generate_removed_link_items(self, removed_links: CommentsMap) -> str:
        removed_link_items = ''
        for link_name, reason in sorted(removed_links.items()):
            removed_link_items += f"""\
# {link_name} ({reason})
"""
        return removed_link_items

    def _generate_notable_link_items(self, notable_links: CommentsMap) -> str:
        notable_link_items = ''
        for link_name, reason in sorted(notable_links.items()):
            notable_link_items += f"""\
# {link_name} ({reason})
"""
        return notable_link_items

    def _generate_info_item(
        self, zone_name: str, eras: List[ZoneEraRaw],
    ) -> str:
        era_items = ''
        for era in eras:
            era_items += self._generate_era_item(era)

        return self.ZONE_INFO_ITEM.format(
            zoneFullName=zone_name,
            zoneNormalizedName=normalize_name(zone_name),
            numEras=len(eras),
            eraItems=era_items)

    def _generate_era_item(self, era: ZoneEraRaw) -> str:
        policy_name = era['rules']
        if policy_name in ['-', ':']:
            zone_policy = f"'{policy_name}'"
        else:
            zone_policy = f'ZONE_POLICY_{normalize_name(policy_name)}'

        return self.ZONE_ERA_ITEM.format(
            raw_line=normalize_raw(era['raw_line']),
            offset_seconds=era['offset_seconds_truncated'],
            zone_policy=zone_policy,
            rules_delta_seconds=era['rules_delta_seconds_truncated'],
            format=era['format'],  # preserve the %s
            until_year=era['until_year'],
            until_month=era['until_month'],
            until_day=era['until_day'],
            until_seconds=era['until_seconds_truncated'],
            until_time_suffix=era['until_time_suffix'])

    # ------------------------------------------------------------------------
    # Zone Registry
    # ------------------------------------------------------------------------

    def _generate_registry(self) -> str:
        info_map_items = self._generate_info_map_items(self.zones_map)

        return self.ZONE_REGISTRY_FILE.format(
            invocation=self.invocation,
            tz_version=self.tz_version,
            tz_files=self.tz_files,
            numInfos=len(self.zones_map),
            infoMapItems=info_map_items,
        )

    def _generate_info_map_items(self, zones_map: ZonesMap) -> str:
        """Generate a map of (zone_name -> zoneInfo), shorted by name.
        """
        info_map_items = ''
        for zone_name, zones in sorted(
                zones_map.items(),
                key=lambda x: normalize_name(x[0])):
            info_map_items += f"""\
    '{zone_name}': ZONE_INFO_{normalize_name(zone_name)},
"""
        return info_map_items
