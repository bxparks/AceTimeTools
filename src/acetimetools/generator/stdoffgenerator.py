# Copyright 2023 Brian T. Park
#
# MIT License

"""
Generate the stdoff.txt file which contains a list of timzones and its STDOFF.
By default the STDOFF of the current year is extracted.

# Comments
ZoneName Stdoff(seconds)
"""

import logging
import os
from typing import Dict
from typing import Tuple

from acetimetools.datatypes.attyping import ZoneInfoRaw
from acetimetools.datatypes.attyping import ZonesMap
from acetimetools.datatypes.attyping import LinksMap
from acetimetools.transformer.transformer import time_string_to_seconds


class StdoffGenerator:
    """Generate Go lang files (zone_infos.go, zone_policies.go) which are
    used by the ZoneProcessor class.
    """

    STDOFF_FILE_NAME = 'stdoff.txt'

    def __init__(
        self,
        invocation: str,
        tz_version: str,
        year: int,
        zones_map: ZonesMap,
        links_map: LinksMap,
    ):
        wrapped_invocation = '\n//     --'.join(invocation.split(' --'))
        self.invocation = wrapped_invocation
        self.year = year

        self.tz_version = tz_version
        self.zones_map = zones_map
        self.links_map = links_map

    def generate_files(self, output_dir: str) -> None:
        self._write_file(
            output_dir, self.STDOFF_FILE_NAME, self._generate_file_string())

    def _write_file(self, output_dir: str, filename: str, content: str) -> None:
        full_filename = os.path.join(output_dir, filename)
        with open(full_filename, 'w', encoding='utf-8') as output_file:
            print(content, end='', file=output_file)
        logging.info("Created %s", full_filename)

    def _generate_file_string(self) -> str:
        string = f"""\
# This file was generated by the following script:
#
#   $ {self.invocation}
#
# from https://github.com/eggert/tz/releases/tag/{self.tz_version}
# for the year {self.year}.
#
# DO NOT EDIT

# zone stdoff(int) stdoff(string)
"""

        offset_map = self._generate_stdoff_map()
        for zone, offset in sorted(offset_map.items()):
            string += f"{zone} {offset[0]} {offset[1]}\n"
        return string

    def _generate_stdoff_map(self) -> Dict[str, Tuple[int, str]]:
        offset_map: Dict[str, Tuple[int, str]] = {}
        for zone, info in self.zones_map.items():
            offset, string = self._find_stdoff_for_year(info, self.year)
            offset_map[zone] = (offset, string)

        for link, zone in self.links_map.items():
            info = self.zones_map[zone]
            offset, string = self._find_stdoff_for_year(info, self.year)
            offset_map[link] = (offset, string)
        return offset_map

    def _find_stdoff_for_year(
        self, info: ZoneInfoRaw, year: int
    ) -> Tuple[int, str]:
        for era in info['eras']:
            if year < era['until_year']:
                offset_string = era['offset_string']
                offset_seconds = time_string_to_seconds(offset_string)
                return offset_seconds, offset_string
        return 0, "00:00"  # not found, should never happen, return 0
