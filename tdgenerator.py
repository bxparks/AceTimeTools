# Copyright 2019 Brian T. Park
#
# MIT License
"""
Generate the validation_data.h and validation_data.cpp files for the
ValidationTest unit test.
"""

import logging
import os

from transformer import short_name
from transformer import seconds_to_hms
from transformer import hms_to_seconds
from transformer import div_to_zero
from extractor import EPOCH_YEAR
from extractor import MAX_YEAR
from extractor import MAX_YEAR_TINY
from extractor import MIN_YEAR
from extractor import MIN_YEAR_TINY
from extractor import MAX_UNTIL_YEAR
from extractor import MAX_UNTIL_YEAR_TINY
from argenerator import to_tiny_year
from argenerator import normalize_name
from argenerator import normalize_raw
from validator import TestItem


class TestDataGenerator:
    """Generate Arduino data files for ValidationTest.ino.
    """

    VALIDATION_DATA_H_FILE = """\
// This file was generated by the following script:
//
//  $ {invocation}
//
// using the TZ Database files from
// from https://github.com/eggert/tz/releases/tag/{tz_version}
//
// DO NOT EDIT

#ifndef ACE_TIME_VALIDATION_TEST_VALIDATION_DATA_H
#define ACE_TIME_VALIDATION_TEST_VALIDATION_DATA_H

#include "ValidationDataType.h"

// numZones: {numZones}
{validationItems}

#endif
"""

    VALIDATION_DATA_H_ITEM = """\
extern const ValidationData kValidationData{zoneShortName};
"""

    VALIDATION_DATA_CPP_FILE = """\
// This file was generated by the following script:
//
//   $ {invocation}
//
// using the TZ Database files from
// https://github.com/eggert/tz/releases/tag/{tz_version}
//
// DO NOT EDIT

#include <AceTime.h>
#include "validation_data.h"

using namespace ace_time::zonedb;

{validationItems}
"""

    VALIDATION_DATA_CPP_ITEM = """\
//---------------------------------------------------------------------------
// Zone name: {zoneShortName}
//---------------------------------------------------------------------------

static const ValidationItem kValidationItems{zoneShortName}[] = {{
  //    epoch,  utc,  dst,   y,  m,  d,  h,  m,  s
{testItems}
}};

const ValidationData kValidationData{zoneShortName} = {{
  &kZone{zoneShortName} /*zoneInfo*/,
  sizeof(kValidationItems{zoneShortName})/sizeof(ValidationItem) /*numItems*/,
  kValidationItems{zoneShortName} /*items*/,
}};

"""

    TEST_ITEM = """\
  {{ {epochSeconds:9}, {utcOffsetMinutes:4}, {deltaOffsetMinutes:4}, \
{yearTiny:3}, {month:2}, {day:2}, {hour:2}, {minute:2}, {second:2} }}, \
// type={type}
"""

    TESTS_CPP = """\
// This file was generated by the following script:
//
//   $ {invocation}
//
// using the TZ Database files from
// https://github.com/eggert/tz/releases/tag/{tz_version}
//
// DO NOT EDIT

#include <AUnit.h>
#include "TransitionTest.h"
#include "validation_data.h"

// numZones: {numZones}
testF(TransitionTest, validateData) {{
{assertionItems}
}}   
"""

    ASSERTION_ITEM = """\
  assertValid(&kValidationData{zoneShortName});
"""

    VALIDATION_DATA_H_FILE_NAME = 'validation_data.h'
    VALIDATION_DATA_CPP_FILE_NAME = 'validation_data.cpp'
    TESTS_CPP_FILE_NAME = 'tests.cpp'

    def __init__(self, invocation, tz_version, test_data, num_items):
        self.invocation = invocation
        self.tz_version = tz_version
        self.test_data = test_data
        self.num_items = num_items

    def generate_files(self, output_dir):
        self.write_file(output_dir, self.VALIDATION_DATA_H_FILE_NAME,
                        self.generate_validation_data_h())
        self.write_file(output_dir, self.VALIDATION_DATA_CPP_FILE_NAME,
                        self.generate_validation_data_cpp())
        self.write_file(output_dir, self.TESTS_CPP_FILE_NAME,
                        self.generate_tests_cpp())

    def write_file(self, output_dir, filename, content):
        full_filename = os.path.join(output_dir, filename)
        with open(full_filename, 'w', encoding='utf-8') as output_file:
            print(content, end='', file=output_file)
        logging.info("Created %s", full_filename)

    def generate_validation_data_h(self):
        validation_items = self.generate_validation_data_h_items(
            self.test_data)

        return self.VALIDATION_DATA_H_FILE.format(
            invocation=self.invocation,
            tz_version=self.tz_version,
            numZones=len(self.test_data),
            validationItems=validation_items)

    def generate_validation_data_h_items(self, test_data):
        validation_items = ''
        for short_name, test_items in sorted(test_data.items()):
            validation_items += self.VALIDATION_DATA_H_ITEM.format(
                zoneShortName=short_name)
        return validation_items

    def generate_validation_data_cpp(self):
        validation_items = self.generate_validation_data_cpp_items(
            self.test_data)

        return self.VALIDATION_DATA_CPP_FILE.format(
            invocation=self.invocation,
            tz_version=self.tz_version,
            numZones=len(self.test_data),
            validationItems=validation_items)

    def generate_validation_data_cpp_items(self, test_data):
        validation_items = ''
        for short_name, test_items in sorted(test_data.items()):
            test_items_string = self.generate_validation_data_cpp_test_items(
                short_name, test_items)
            validation_item = self.VALIDATION_DATA_CPP_ITEM.format(
                zoneShortName=short_name,
                testItems=test_items_string)
            validation_items += validation_item
        return validation_items

    def generate_validation_data_cpp_test_items(self, short_name, test_items):
        """Generate the {testItems} value.
        """
        s = ''
        for test_item in test_items:
            utc_offset_minutes = div_to_zero(test_item.utc_offset, 60)
            delta_offset_minutes = div_to_zero(test_item.dst_offset, 60)
            s += self.TEST_ITEM.format(
                epochSeconds=test_item.epoch,
                utcOffsetMinutes=utc_offset_minutes,
                deltaOffsetMinutes=delta_offset_minutes,
                yearTiny=test_item.y - EPOCH_YEAR,
                month=test_item.M,
                day=test_item.d,
                hour=test_item.h,
                minute=test_item.m,
                second=test_item.s,
                type=test_item.type)
        return s

    def generate_tests_cpp(self):
        assertion_items = self.generate_assertion_items(self.test_data)

        return self.TESTS_CPP.format(
            invocation=self.invocation,
            tz_version=self.tz_version,
            numZones=len(self.test_data),
            assertionItems=assertion_items)

    def generate_assertion_items(self, test_data):
        assertion_items = ''
        for short_name, test_items in sorted(test_data.items()):
            assertion_items += self.ASSERTION_ITEM.format(
                zoneShortName=short_name)
        return assertion_items

