# Copyright 2018 Brian T. Park
#
# MIT License
"""
Generate the validation_data.py file that contains test validation data.
"""

import logging
import os
from transformer import div_to_zero

class PythonValidationGenerator:
    """Generate Python validation_data.py file.
    """

    VALIDATION_DATA_FILE = """\
# This file was generated by the following script:
#
#  $ {invocation}
#
# using the TZ Database files
# from https://github.com/eggert/tz/releases/tag/{tz_version}
#
# DO NOT EDIT

# numZones: {numZones}

{validationItems}

#---------------------------------------------------------------------------

VALIDATION_DATA = {{
{validationMapItems}
}}

"""
    VALIDATION_ITEM = """\
VALIDATION_ITEM_{zoneShortName} = [
{testItems}
]

"""

    TEST_ITEM = """\
    TestItem({epochSeconds:9}, {utc:4}, {dst:4}, {y:4}, {M:2}, {d:2}, {h:2}, {m:2}, {s:2}, '{type}'),
"""

    VALIDATION_MAP_ITEM = """\
    '{zoneShortName}': VALIDATION_ITEM_{zoneShortName},
"""

    VALIDATION_FILE_NAME = 'validation_data.py'

    def __init__(self, invocation, tz_version, test_data, num_items):
        self.invocation = invocation
        self.tz_version = tz_version
        self.test_data = test_data
        self.num_items = num_items

    def generate_files(self, output_dir):
        self.write_file(output_dir, self.VALIDATION_FILE_NAME,
                        self.generate_validation_data())

    def write_file(self, output_dir, filename, content):
        full_filename = os.path.join(output_dir, filename)
        with open(full_filename, 'w', encoding='utf-8') as output_file:
            print(content, end='', file=output_file)
        logging.info("Created %s", full_filename)

    def generate_validation_data(self):
        validation_items_str = self.get_validation_items(self.test_data)
        validation_map_items_str = self.get_validation_map_items(self.test_data)
        return self.VALIDATION_DATA_FILE.format(
            invocation=self.invocation,
            tz_version=self.tz_version,
            numZones=len(self.test_data),
            validationItems=validation_items_str,
            validationMapItems=validation_map_items_str)

    def get_validation_items(self, test_data):
        validation_items_str = ''
        for short_name, test_items in sorted(test_data.items()):
            test_items_str = self.get_test_items(test_items)
            validation_items_str += self.VALIDATION_ITEM.format(
                zoneShortName=short_name,
                testItems=test_items_str)
        return validation_items_str

    def get_test_items(self, test_items):
        test_items_str = ''
        for test_item in test_items:
            test_items_str += self.get_test_item(test_item)
        return test_items_str

    def get_test_item(self, test_item):
        return self.TEST_ITEM.format(
            epochSeconds=test_item.epoch,
            utc=div_to_zero(test_item.utc_offset, 60),
            dst=div_to_zero(test_item.dst_offset, 60),
            y=test_item.y,
            M=test_item.M,
            d=test_item.d,
            h=test_item.h,
            m=test_item.m,
            s=test_item.s,
            type=test_item.type)
            
    def get_validation_map_items(self, test_data):
        str = ''
        for short_name, test_items in sorted(test_data.items()):
            str += self.VALIDATION_MAP_ITEM.format(
                zoneShortName=short_name)
        return str
